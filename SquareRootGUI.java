package SquareRoot;

import java.awt.Color;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    * Class       SquareRootGUI
    * File        SquareRootGUI.java 
    * Description This program generates the square root of a user provided 
    *             number based on either the Newton method or the Bakhshali
    *             method. It calculates it through repeated guesses and once 
    *             it is within the user specified accuracy it displays the 
    *             answer along with the error and how many guesses it had to 
    *             make before being suitably close to the actual square root. 
    *             The first guess is calculated by the program as well. The user
    *             only needs to enter a number and to how many decimal places 
    *             they would like it to be accurate it. They can then select 
    *             which method they would like, and the program will do the 
    *             necessary calculations. 
    *             Thank you Isa for help with the splash screen. 
    *             
    *             
    * @author     Cameron Ufland
    * Environment 1.8.0_151; NetBeans 8.2
    * System      PC Windows 10
    * Date        February 24, 2018
    * @version    1.0
    * @see        javax.swing.JFrame
    * History log  
    */
public class SquareRootGUI extends javax.swing.JFrame {
   
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	SquareRootGUI() 
    * Description      	Creates the form for the SquareRootGUI, loads the
    *                   date into the menu bar. Sets focus to the number text
    *                   field, sets the calculate button as the default,
    *                   loads title bar icon, sets the location to center, and
    *                   sets the backbround color to cyan. It also ensures 
    *                   the form is sent to the front.
    * member methods    initComponents()
    *                   getRootPane()
    *                   setDefaultButton()
    *                   setIconImage()
    *                   getContentPane()
    *                   getDefaultToolKit()
    *                   setLocationRelativeTo()
    *                   toFront()
    *                   
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public SquareRootGUI() {
        initComponents();
        this.getRootPane().setDefaultButton(CalculateJButton);
        setDate();
        //Sets icon image as square root sign vice cup of java
        this.setIconImage(Toolkit.getDefaultToolkit().
                getImage("src/SquareRoot/square-root.jpg"));
        
        //sets location for the frame as center
        setLocationRelativeTo(null);
        
        //changes the background to cyan
        this.getContentPane().setBackground(Color.CYAN);
        
        this.toFront();
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	setDate() 
    * Description      	Gets the information for the date, loads into the proper 
    *                   format and displays it in the titlebar. Also displays 
    *                   title of program.
    * member methods 	setTitle 
    * @param           	none 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void setDate()
    {
        DateFormat dateFormat = 
                new SimpleDateFormat("M/d/y");//Sets the date format
        java.util.Date date = new java.util.Date();
                               //calls the date utility and loads it into date
                              //variable
                
        this.setTitle("Square Root Machine"
                + " "+ dateFormat.format(date)); 
            //display date and title in title bar
                
    }
    //end of setdate()
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SquareRootJGroup = new javax.swing.ButtonGroup();
        NumberJLabel = new javax.swing.JLabel();
        AccuracyJLabel = new javax.swing.JLabel();
        CalculateJButton = new javax.swing.JButton();
        EstimateJTextField = new javax.swing.JTextField();
        ActualJTextField = new javax.swing.JTextField();
        NumberJFormattedTextField = new javax.swing.JFormattedTextField();
        AccuracyJFormattedTextField = new javax.swing.JFormattedTextField();
        EstimateJLabel = new javax.swing.JLabel();
        ActualJLabel = new javax.swing.JLabel();
        TitleJLabel = new javax.swing.JLabel();
        ErrorJLabel = new javax.swing.JLabel();
        ErrorJtextField = new javax.swing.JTextField();
        ExitJButton = new javax.swing.JButton();
        ClearJButton = new javax.swing.JButton();
        SelectionJPanel = new javax.swing.JPanel();
        NewtonJRadioButton = new javax.swing.JRadioButton();
        BakhshaliJRadioButton = new javax.swing.JRadioButton();
        RepetitionsJLabel = new javax.swing.JLabel();
        RepetitionsJTextField = new javax.swing.JTextField();
        ImageJLabel = new javax.swing.JLabel();
        SquareRootJMenuBar = new javax.swing.JMenuBar();
        FileJMenu = new javax.swing.JMenu();
        ClearJMenuItem = new javax.swing.JMenuItem();
        QuitJMenuItem = new javax.swing.JMenuItem();
        HelpJMenu = new javax.swing.JMenu();
        AboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        NumberJLabel.setText("Enter a number");

        AccuracyJLabel.setText("Number of decimal places");

        CalculateJButton.setMnemonic('C');
        CalculateJButton.setText("Calculate");
        CalculateJButton.setToolTipText("Will calculate the Square root based on the selections made");
        CalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateJButtonActionPerformed(evt);
            }
        });

        EstimateJTextField.setEditable(false);
        EstimateJTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        EstimateJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        EstimateJTextField.setToolTipText("Displays the answer based on the selected method");

        ActualJTextField.setEditable(false);
        ActualJTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ActualJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ActualJTextField.setToolTipText("Displays the Answer based on computer calculation");

        NumberJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####.###############"))));
        NumberJFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        NumberJFormattedTextField.setToolTipText("Enter a number to find the square root of that number by one of two methods.");

        AccuracyJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        AccuracyJFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        AccuracyJFormattedTextField.setToolTipText("Accuracy to a number of decimal places between 1 and 15");

        EstimateJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        EstimateJLabel.setText("Answer based on method:");

        ActualJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ActualJLabel.setText("Actual answer:");

        TitleJLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TitleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleJLabel.setText("The Square Root Machine");

        ErrorJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ErrorJLabel.setText("Error (%):");
        ErrorJLabel.setToolTipText("");

        ErrorJtextField.setEditable(false);
        ErrorJtextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ErrorJtextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ErrorJtextField.setToolTipText("Displays the error percentage between the actual answer and the answer based on the chosen method");

        ExitJButton.setMnemonic('x');
        ExitJButton.setText("Exit");
        ExitJButton.setToolTipText("Closes the program");
        ExitJButton.setPreferredSize(new java.awt.Dimension(77, 23));
        ExitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitJButtonActionPerformed(evt);
            }
        });

        ClearJButton.setMnemonic('l');
        ClearJButton.setText("Clear");
        ClearJButton.setToolTipText("Clears all the textfields and resets the radio button.");
        ClearJButton.setPreferredSize(new java.awt.Dimension(77, 23));
        ClearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearJButtonActionPerformed(evt);
            }
        });

        SelectionJPanel.setBackground(new java.awt.Color(0, 255, 255));
        SelectionJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Please select an estimation method"));
        SelectionJPanel.setLayout(new java.awt.GridLayout(1, 2, 3, 0));

        SquareRootJGroup.add(NewtonJRadioButton);
        NewtonJRadioButton.setSelected(true);
        NewtonJRadioButton.setText("Newton Method");
        NewtonJRadioButton.setToolTipText("Will estimate the square root based on the Newton(Babylonian) method");
        SelectionJPanel.add(NewtonJRadioButton);

        SquareRootJGroup.add(BakhshaliJRadioButton);
        BakhshaliJRadioButton.setText("Bakhshali Method");
        BakhshaliJRadioButton.setToolTipText("Will estimate the Square root based on the Bakshali method");
        SelectionJPanel.add(BakhshaliJRadioButton);

        RepetitionsJLabel.setText("Repetitions to achieve results");

        RepetitionsJTextField.setEditable(false);
        RepetitionsJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        RepetitionsJTextField.setToolTipText("How many times the program repeated the estimation method before being within the desired accuracy");

        ImageJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SquareRoot/square-root.jpg"))); // NOI18N

        FileJMenu.setText("File");

        ClearJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        ClearJMenuItem.setMnemonic('l');
        ClearJMenuItem.setText("Clear");
        ClearJMenuItem.setToolTipText("Clears the textfields, and resets the radiobuttons");
        ClearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(ClearJMenuItem);

        QuitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        QuitJMenuItem.setMnemonic('x');
        QuitJMenuItem.setText("Exit");
        QuitJMenuItem.setToolTipText("Closes the program");
        QuitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(QuitJMenuItem);

        SquareRootJMenuBar.add(FileJMenu);

        HelpJMenu.setMnemonic('H');
        HelpJMenu.setText("Help");

        AboutJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        AboutJMenuItem.setMnemonic('A');
        AboutJMenuItem.setText("About");
        AboutJMenuItem.setToolTipText("loads the about menu");
        AboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutJMenuItemActionPerformed(evt);
            }
        });
        HelpJMenu.add(AboutJMenuItem);

        SquareRootJMenuBar.add(HelpJMenu);

        setJMenuBar(SquareRootJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SelectionJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(TitleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ImageJLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AccuracyJLabel)
                                    .addComponent(NumberJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NumberJFormattedTextField)
                                    .addComponent(AccuracyJFormattedTextField))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ActualJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ErrorJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EstimateJLabel)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ErrorJtextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ActualJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EstimateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RepetitionsJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RepetitionsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(CalculateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ClearJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ExitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TitleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumberJLabel)
                    .addComponent(NumberJFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccuracyJLabel)
                    .addComponent(AccuracyJFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SelectionJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EstimateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EstimateJLabel)
                    .addComponent(CalculateJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ActualJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ActualJLabel)
                    .addComponent(ClearJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ErrorJLabel)
                    .addComponent(ErrorJtextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RepetitionsJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RepetitionsJLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	DisplayJButtonActionPerformed() 
    * Description      	Gathers all the inputted data and stores it in variables.
    *                   It validates all the data. It ensures that the number 
    *                   that was entered was less than one billion, and greater
    *                   zero. It then validates the accuracy which represents 
    *                   the number of decimal places the answer will be accurate
    *                   to. At this point the program checks to see which 
    *                   method was chosen and then runs the methods for those 
    *                   specific methods. It also calculates the actual square 
    *                   root using the Math.sqrt method to compare to the 
    *                   estimated answer. The calculation methods return their 
    *                   answer as a double and it uses that data along with the
    *                   actual square root to calculate an error percentage 
    *                   using the folling formula
    *                   |exact - estimate|/exact * 100
    *                   exact = square root calculated via Math.sqrt
    *                   estimate = square root calculated by selected method
    * 
    *                   The program then displays the results. If the data fails
    *                   validation a dialog box pointing out the error pops up
    *                   and the user is asked to correct the mistake.
    * member methods    JOptionPane() 
    *                   NewtonMethod()
    *                   BakhshaliMethod()                
    * @return         	void 
    * @param           	none 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void CalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateJButtonActionPerformed
        final double MAX_NUMBER = 1000000000;
        final double MAX_ACCURACY = 15;
        String message = "Error--Something went wrong.";
        String actualSQRTString = "";
        double number = 0;
        int exponent = 0;
        double accuracy = 0;
        double actualSQRT = 0;
        double error = 0;
        double estimateSQRT = 0;
        try
        {
         number = Double.parseDouble(NumberJFormattedTextField.getText());
         exponent = Integer.parseInt(AccuracyJFormattedTextField.getText());
         accuracy = Math.pow(10, -1 * exponent);
         actualSQRT = Math.sqrt(number);
        if (number < 0 ||number > MAX_NUMBER || 
                accuracy < 0|| accuracy > MAX_ACCURACY || 
                NumberJFormattedTextField.getText().equals(null) ||
                AccuracyJFormattedTextField.getText().equals(null) )
           {
               if (number < 0 || number > MAX_NUMBER || 
                NumberJFormattedTextField.getText().equals(null) )
               //make sure the Number text field is filled out correctly.
               {
                message = "Please ensure that you are entering a "
                        + "positive number less than one billion. ";
                NumberJFormattedTextField.requestFocus();
                NumberJFormattedTextField.selectAll();
                throw new NumberFormatException();
               }
               //make sure the accuracy textfield is filled out correctly
               else if (accuracy < 0 || accuracy > MAX_ACCURACY ||
                AccuracyJFormattedTextField.getText().equals(null) )
               {
                message = "Please ensure that you are entering a positive whole"
                        + " number less than twenty for accuracy." ;
                AccuracyJFormattedTextField.requestFocus();
                AccuracyJFormattedTextField.selectAll(); 
                throw new NumberFormatException();
               }
            }
        else
        {
            //Check which radio button is selected
            
            if (NewtonJRadioButton.isSelected())
            {
               estimateSQRT = NewtonMethod(number,actualSQRT, accuracy);
               
            }
            else if (BakhshaliJRadioButton.isSelected())
            {
             estimateSQRT = BakhshaliMethod(number, actualSQRT, accuracy);
               
            }
            //calculate the error
            error = (Math.abs(actualSQRT-estimateSQRT)/actualSQRT)*100 ;
            ErrorJtextField.setText( 
                    String.valueOf(error).format("%.15f", error ));
            //display the answer via the Math.sqrt method
            ActualJTextField.setText(
                    actualSQRTString.format("%.15f", actualSQRT));
        }
        }
        catch(NumberFormatException exp)
        {
         JOptionPane.showMessageDialog(null, message, "Input Error",
               JOptionPane.WARNING_MESSAGE);           
        }
           
           
       
    }//GEN-LAST:event_CalculateJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	ExitJButtonActionPerformed 
    * Description      	Closes the program using the exit button
    * @return         	void 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    private void ExitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitJButtonActionPerformed
    System.exit(0);
    }//GEN-LAST:event_ExitJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	ClearJButtonActionPerformed() 
    * Description      	Clears the contents of the textboxes, checks the Newton 
    *                   method radio button. Sets focus to Number Textfield
    * @return         	void 
    * @param           	none 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void ClearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearJButtonActionPerformed
    NumberJFormattedTextField.setText("");
    NumberJFormattedTextField.requestFocus();
    AccuracyJFormattedTextField.setText("");
    ActualJTextField.setText("");
    EstimateJTextField.setText("");
    ErrorJtextField.setText("");
    RepetitionsJTextField.setText("");
    NewtonJRadioButton.setSelected(true);
    
    }//GEN-LAST:event_ClearJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	ClearJMenuItemActionPerformed() 
    * Description      	Clears the contents of the textboxes, checks the Newton 
    *                   method radio button. Sets focus to Number Textfield,
    *                   using the menu item selection.\
    * @return         	void 
    * @param           	none 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void ClearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearJMenuItemActionPerformed
        ClearJButtonActionPerformed(evt);
    }//GEN-LAST:event_ClearJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	QuitJMenuItemActionPerformed()
    * Description      	Closes the program using the Quit Menu item 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *<pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    private void QuitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitJMenuItemActionPerformed
      ExitJButtonActionPerformed(evt);
    }//GEN-LAST:event_QuitJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	AboutJMenuActionPerformed() 
    * Description      	Pop ups a Dialog with information about the program, and
    *                   general copyright and warning information.
    * member methods 	About()
    *                   setVisible()
    * @param           	evt 
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

    private void AboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutJMenuItemActionPerformed
    About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_AboutJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	NewtonMethod() 
    * Description       If the user selects the Newton Method radio button the 
    *                   caclulate method will call this method. This method 
    *                   calculates the square root based on the following        
    *                   formula. 
    *                   X1 = (xzero + ( number /xzero))/2 
    *                   where xzero is the seed value calculated by the 
    *                   seedMethod(), and then the most recent guess as to what
    *                   the square root equals. 
    *                   X1 is the next guess to be tested, 
    *                   number is the original number inputted by the user.
    *                   The method than repeats these calculations until the    
    *                   the estimate is within the accuracy provided by the user
    *                   If it is it displays the results, formats the answer 
    *                   so that only the requested number of decimal places 
    *                   appears and returns the last guess to be used to 
    *                   calculate the error. This method needs the original 
    *                   number, the actual square root and the accuracy provided 
    *                   by the user. 
    * member methods 	seedMethod()
    * @return           xzero
    * @param           	number
    * @param            actual
    * @param            accuracy
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private double NewtonMethod(double number, double actual, double accuracy)
    {   
        String estimate = "";
        int exponent = Integer.parseInt(AccuracyJFormattedTextField.getText());
        int iterations = 0;
        double xzero = seedMethod(number);
        //loop to get answer, will repeat at least four times
        while((Math.abs(xzero - actual)) > accuracy)
        {
            double xnext = (xzero + (number / xzero)) / 2;
            xzero = xnext;
            iterations += 1;    
        }
        //formats it to display the proper number of decimal places
        RepetitionsJTextField.setText(String.valueOf(iterations));
        EstimateJTextField.setText( estimate.format("%." + exponent 
                     + "f", xzero ));
        return xzero;
    }
    //end NewtonMethod()
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	BakhshaliMethod() 
    * Description       If the user selects the Bakhshali Method radio button 
    *                   the caclulate method will call this method. This method 
    *                   calculates the square root based on the following        
    *                   formula. 
    *                   alpha = ( number - ( xzero * xzero ) )/ ( 2 * xzero )
    *                   beta =  xzero + alpha
    *                   X1 = beta - ((alpha * alpha)/ (2 * beta))
    *                   where xzero is the seed value calculated by the 
    *                   seedMethod(), and then the most recent guess as to what
    *                   the square root equals. 
    *                   alpha is the current guess to be tested
    *                   beta is the last guess plus the current guess (alpha)
    *                   X1 is the next guess that will be checked for accuracy.
    *                   This method essentially makes two guess per iteration.
    *                   The method than repeats these calculations until the    
    *                   the estimate is within the accuracy provided by the user
    *                   If it is it displays the results, formats the answer 
    *                   so that only the requested number of decimal places 
    *                   appears and returns the last guess to be used to 
    *                   calculate the error. This method needs the original 
    *                   number, the actual square root and the accuracy provided 
    *                   by the user. 
    * member methods 	seedMethod()
    * @return           xzero
    * @param           	number
    * @param            actual
    * @param            accuracy
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private double BakhshaliMethod(double number, double actual,
            double accuracy) 
    {
        int exponent = Integer.parseInt(AccuracyJFormattedTextField.getText());
        int iterations = 0;//repition counter
        double xzero = seedMethod(number); //to get the first guess
        double alpha = 0, beta = 0, nextx = 0;
        String estimate = "";
        //loop to get answer, will repeat at least four times
        while(Math.abs((xzero - actual)) > accuracy)
        {
            alpha = (number - (xzero * xzero))/ (2 * xzero);
            beta = xzero + alpha;
            nextx = beta - ((alpha * alpha)/ (2 * beta));
            xzero = nextx; 
            iterations += 1;
        }
        //formats it to display the proper number of decimal places
        estimate = estimate.format("%." + exponent 
                     + "f", xzero );
        RepetitionsJTextField.setText(String.valueOf(iterations));
        EstimateJTextField.setText(estimate );
        return xzero; 
    }
    //end of the BakhshaliMethod()
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    *<pre> 
    * Method          	seedMethod() 
    * Description       This program calculates the first guess that will be 
    *                   used to then calculate the square root using the selected
    *                   method. 
    *                   This method calculates that first guess based on the 
    *                   following
    *                   it first calculates to what power of ten the number 
    *                   represents. It does this by taking the users number and 
    *                   and taking the log base ten of it. It then divides that 
    *                   number by two, and makes it an integer and multiplies it
    *                   by two to make it an even number. This helps in getting 
    *                   the parts to put the number in something like 
    *                   scientific notation. This number represents to what 
    *                   power you would need to raise ten to for the calculation
    *                   Then it calculates the base or the number decimal for 
    *                   scientific notation. It does this by dividing the number
    *                   by ten to the power of the calculated exponent. Once it 
    *                   has all this it then compares the base to ten. If its 
    *                   equal or bigger than ten it makes the base 6 and if its
    *                   less it makes it 2. it then returns the base times the 
    *                   exponent to the method that called it. 
    * member methods 	Math.log10()
    *                   Math.pow()
    * @return           seed
    * @param           	number
    * @author         	Cameron Ufland 
    * Date             	02/24/2018 
    *</pre> 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private double seedMethod(double number)
    {
        //variables needed for this method
        int exponentN = 2*((int)Math.log10(number)/2); //the exponent
        double base = number / Math.pow(10,exponentN );//the base value
        double seed = 0; //the value that will be returned.
        if(base < 10)
            base = 2;
        else if (base >= 10)
            base = 6;
        return seed = base * Math.pow(10, exponentN/2);
            
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SquareRootGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SquareRootGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SquareRootGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SquareRootGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SquareRootGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutJMenuItem;
    private javax.swing.JFormattedTextField AccuracyJFormattedTextField;
    private javax.swing.JLabel AccuracyJLabel;
    private javax.swing.JLabel ActualJLabel;
    private javax.swing.JTextField ActualJTextField;
    private javax.swing.JRadioButton BakhshaliJRadioButton;
    private javax.swing.JButton CalculateJButton;
    private javax.swing.JButton ClearJButton;
    private javax.swing.JMenuItem ClearJMenuItem;
    private javax.swing.JLabel ErrorJLabel;
    private javax.swing.JTextField ErrorJtextField;
    private javax.swing.JLabel EstimateJLabel;
    private javax.swing.JTextField EstimateJTextField;
    private javax.swing.JButton ExitJButton;
    private javax.swing.JMenu FileJMenu;
    private javax.swing.JMenu HelpJMenu;
    private javax.swing.JLabel ImageJLabel;
    private javax.swing.JRadioButton NewtonJRadioButton;
    private javax.swing.JFormattedTextField NumberJFormattedTextField;
    private javax.swing.JLabel NumberJLabel;
    private javax.swing.JMenuItem QuitJMenuItem;
    private javax.swing.JLabel RepetitionsJLabel;
    private javax.swing.JTextField RepetitionsJTextField;
    private javax.swing.JPanel SelectionJPanel;
    private javax.swing.ButtonGroup SquareRootJGroup;
    private javax.swing.JMenuBar SquareRootJMenuBar;
    private javax.swing.JLabel TitleJLabel;
    // End of variables declaration//GEN-END:variables

    
}
